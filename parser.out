Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AS
    ASYNC
    AWAIT
    BREAK
    CONST
    CONTINUE
    CRATE
    DOUBLEQUOTE
    DYN
    ELSE
    ENUM
    EXTERN
    IF
    IMPL
    LOOP
    MATCH
    MODULE
    MOVE
    PRINT
    PUB
    RETURN
    SINGLEQUOTE
    STATIC
    STRUCT
    SUPER
    Self
    TRAIT
    TYPE
    UNSAFE
    USE
    WHERE
    self

Grammar

Rule 0     S' -> funcion
Rule 1     funcion -> FN ID LPAREN RPAREN LCURLYBRACKET codigo RCURLYBRACKET
Rule 2     codigo -> expresionAritmetica masCodigo
Rule 3     codigo -> impresion masCodigo
Rule 4     codigo -> condiciones masCodigo
Rule 5     codigo -> asignacion masCodigo
Rule 6     codigo -> estrFor
Rule 7     codigo -> estrWhile
Rule 8     codigo -> input masCodigo
Rule 9     codigo -> funciones
Rule 10    funciones -> funcion
Rule 11    funciones -> funcion funciones
Rule 12    masCodigo -> SEMICOLON
Rule 13    masCodigo -> SEMICOLON codigo
Rule 14    expresionAritmetica -> valor operador valor
Rule 15    expresionAritmetica -> valor operador expresionAritmetica
Rule 16    operador -> PLUS
Rule 17    operador -> MINUS
Rule 18    operador -> MULT
Rule 19    operador -> DIVIDE
Rule 20    operador -> MOD
Rule 21    valor -> INTEGER
Rule 22    valor -> FLOAT
Rule 23    valor -> ID
Rule 24    valores -> valor
Rule 25    valores -> valor COMMA valores
Rule 26    impresion -> PRINTLN NOT LPAREN valores RPAREN
Rule 27    input -> STD COLON COLON IO COLON COLON STDIN LPAREN RPAREN DOT READLINE LPAREN REF MUT ID RPAREN
Rule 28    condicion -> valor operComp valor
Rule 29    operComp -> GREATERTHAN
Rule 30    operComp -> LESSTHAN
Rule 31    operComp -> EQUALITY
Rule 32    operComp -> DIFFERENTFROM
Rule 33    operComp -> GREATEREQUALSTHAN
Rule 34    operComp -> LESSEQUALSTHAN
Rule 35    condiciones -> condicion
Rule 36    condiciones -> condicion conector condiciones
Rule 37    condicion -> TRUE
Rule 38    condicion -> FALSE
Rule 39    conector -> AND
Rule 40    conector -> OR
Rule 41    asignacion -> LET ID ASSIGN valor
Rule 42    asignacion -> LET ID ASSIGN condiciones
Rule 43    asignacion -> LET ID ASSIGN expresionAritmetica
Rule 44    asignacion -> LET ID ASSIGN estructuras
Rule 45    estructuras -> tupla
Rule 46    estructuras -> array
Rule 47    tupla -> LPAREN valores RPAREN
Rule 48    tupla -> LPAREN RPAREN
Rule 49    array -> LBRACKET valores RBRACKET
Rule 50    array -> LBRACKET RBRACKET
Rule 51    estrWhile -> WHILE condiciones LCURLYBRACKET codigo RCURLYBRACKET
Rule 52    estrWhile -> WHILE condiciones LCURLYBRACKET codigo RCURLYBRACKET codigo
Rule 53    estrFor -> FOR ID IN ID LCURLYBRACKET codigo RCURLYBRACKET
Rule 54    estrFor -> FOR ID IN ID LCURLYBRACKET codigo RCURLYBRACKET codigo

Terminals, with rules where they appear

AND                  : 39
AS                   : 
ASSIGN               : 41 42 43 44
ASYNC                : 
AWAIT                : 
BREAK                : 
COLON                : 27 27 27 27
COMMA                : 25
CONST                : 
CONTINUE             : 
CRATE                : 
DIFFERENTFROM        : 32
DIVIDE               : 19
DOT                  : 27
DOUBLEQUOTE          : 
DYN                  : 
ELSE                 : 
ENUM                 : 
EQUALITY             : 31
EXTERN               : 
FALSE                : 38
FLOAT                : 22
FN                   : 1
FOR                  : 53 54
GREATEREQUALSTHAN    : 33
GREATERTHAN          : 29
ID                   : 1 23 27 41 42 43 44 53 53 54 54
IF                   : 
IMPL                 : 
IN                   : 53 54
INTEGER              : 21
IO                   : 27
LBRACKET             : 49 50
LCURLYBRACKET        : 1 51 52 53 54
LESSEQUALSTHAN       : 34
LESSTHAN             : 30
LET                  : 41 42 43 44
LOOP                 : 
LPAREN               : 1 26 27 27 47 48
MATCH                : 
MINUS                : 17
MOD                  : 20
MODULE               : 
MOVE                 : 
MULT                 : 18
MUT                  : 27
NOT                  : 26
OR                   : 40
PLUS                 : 16
PRINT                : 
PRINTLN              : 26
PUB                  : 
RBRACKET             : 49 50
RCURLYBRACKET        : 1 51 52 53 54
READLINE             : 27
REF                  : 27
RETURN               : 
RPAREN               : 1 26 27 27 47 48
SEMICOLON            : 12 13
SINGLEQUOTE          : 
STATIC               : 
STD                  : 27
STDIN                : 27
STRUCT               : 
SUPER                : 
Self                 : 
TRAIT                : 
TRUE                 : 37
TYPE                 : 
UNSAFE               : 
USE                  : 
WHERE                : 
WHILE                : 51 52
error                : 
self                 : 

Nonterminals, with rules where they appear

array                : 46
asignacion           : 5
codigo               : 1 13 51 52 52 53 54 54
condicion            : 35 36
condiciones          : 4 36 42 51 52
conector             : 36
estrFor              : 6
estrWhile            : 7
estructuras          : 44
expresionAritmetica  : 2 15 43
funcion              : 10 11 0
funciones            : 9 11
impresion            : 3
input                : 8
masCodigo            : 2 3 4 5 8
operComp             : 28
operador             : 14 15
tupla                : 45
valor                : 14 14 15 24 25 28 28 41
valores              : 25 26 47 49

Parsing method: LALR

state 0

    (0) S' -> . funcion
    (1) funcion -> . FN ID LPAREN RPAREN LCURLYBRACKET codigo RCURLYBRACKET

    FN              shift and go to state 2

    funcion                        shift and go to state 1

state 1

    (0) S' -> funcion .



state 2

    (1) funcion -> FN . ID LPAREN RPAREN LCURLYBRACKET codigo RCURLYBRACKET

    ID              shift and go to state 3


state 3

    (1) funcion -> FN ID . LPAREN RPAREN LCURLYBRACKET codigo RCURLYBRACKET

    LPAREN          shift and go to state 4


state 4

    (1) funcion -> FN ID LPAREN . RPAREN LCURLYBRACKET codigo RCURLYBRACKET

    RPAREN          shift and go to state 5


state 5

    (1) funcion -> FN ID LPAREN RPAREN . LCURLYBRACKET codigo RCURLYBRACKET

    LCURLYBRACKET   shift and go to state 6


state 6

    (1) funcion -> FN ID LPAREN RPAREN LCURLYBRACKET . codigo RCURLYBRACKET
    (2) codigo -> . expresionAritmetica masCodigo
    (3) codigo -> . impresion masCodigo
    (4) codigo -> . condiciones masCodigo
    (5) codigo -> . asignacion masCodigo
    (6) codigo -> . estrFor
    (7) codigo -> . estrWhile
    (8) codigo -> . input masCodigo
    (9) codigo -> . funciones
    (14) expresionAritmetica -> . valor operador valor
    (15) expresionAritmetica -> . valor operador expresionAritmetica
    (26) impresion -> . PRINTLN NOT LPAREN valores RPAREN
    (35) condiciones -> . condicion
    (36) condiciones -> . condicion conector condiciones
    (41) asignacion -> . LET ID ASSIGN valor
    (42) asignacion -> . LET ID ASSIGN condiciones
    (43) asignacion -> . LET ID ASSIGN expresionAritmetica
    (44) asignacion -> . LET ID ASSIGN estructuras
    (53) estrFor -> . FOR ID IN ID LCURLYBRACKET codigo RCURLYBRACKET
    (54) estrFor -> . FOR ID IN ID LCURLYBRACKET codigo RCURLYBRACKET codigo
    (51) estrWhile -> . WHILE condiciones LCURLYBRACKET codigo RCURLYBRACKET
    (52) estrWhile -> . WHILE condiciones LCURLYBRACKET codigo RCURLYBRACKET codigo
    (27) input -> . STD COLON COLON IO COLON COLON STDIN LPAREN RPAREN DOT READLINE LPAREN REF MUT ID RPAREN
    (10) funciones -> . funcion
    (11) funciones -> . funcion funciones
    (21) valor -> . INTEGER
    (22) valor -> . FLOAT
    (23) valor -> . ID
    (28) condicion -> . valor operComp valor
    (37) condicion -> . TRUE
    (38) condicion -> . FALSE
    (1) funcion -> . FN ID LPAREN RPAREN LCURLYBRACKET codigo RCURLYBRACKET

    PRINTLN         shift and go to state 18
    LET             shift and go to state 20
    FOR             shift and go to state 21
    WHILE           shift and go to state 22
    STD             shift and go to state 23
    INTEGER         shift and go to state 25
    FLOAT           shift and go to state 26
    ID              shift and go to state 7
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28
    FN              shift and go to state 2

    codigo                         shift and go to state 8
    expresionAritmetica            shift and go to state 9
    impresion                      shift and go to state 10
    condiciones                    shift and go to state 11
    asignacion                     shift and go to state 12
    estrFor                        shift and go to state 13
    estrWhile                      shift and go to state 14
    input                          shift and go to state 15
    funciones                      shift and go to state 16
    valor                          shift and go to state 17
    condicion                      shift and go to state 19
    funcion                        shift and go to state 24

state 7

    (23) valor -> ID .

    PLUS            reduce using rule 23 (valor -> ID .)
    MINUS           reduce using rule 23 (valor -> ID .)
    MULT            reduce using rule 23 (valor -> ID .)
    DIVIDE          reduce using rule 23 (valor -> ID .)
    MOD             reduce using rule 23 (valor -> ID .)
    GREATERTHAN     reduce using rule 23 (valor -> ID .)
    LESSTHAN        reduce using rule 23 (valor -> ID .)
    EQUALITY        reduce using rule 23 (valor -> ID .)
    DIFFERENTFROM   reduce using rule 23 (valor -> ID .)
    GREATEREQUALSTHAN reduce using rule 23 (valor -> ID .)
    LESSEQUALSTHAN  reduce using rule 23 (valor -> ID .)
    SEMICOLON       reduce using rule 23 (valor -> ID .)
    AND             reduce using rule 23 (valor -> ID .)
    OR              reduce using rule 23 (valor -> ID .)
    LCURLYBRACKET   reduce using rule 23 (valor -> ID .)
    COMMA           reduce using rule 23 (valor -> ID .)
    RPAREN          reduce using rule 23 (valor -> ID .)
    RBRACKET        reduce using rule 23 (valor -> ID .)


state 8

    (1) funcion -> FN ID LPAREN RPAREN LCURLYBRACKET codigo . RCURLYBRACKET

    RCURLYBRACKET   shift and go to state 29


state 9

    (2) codigo -> expresionAritmetica . masCodigo
    (12) masCodigo -> . SEMICOLON
    (13) masCodigo -> . SEMICOLON codigo

    SEMICOLON       shift and go to state 31

    masCodigo                      shift and go to state 30

state 10

    (3) codigo -> impresion . masCodigo
    (12) masCodigo -> . SEMICOLON
    (13) masCodigo -> . SEMICOLON codigo

    SEMICOLON       shift and go to state 31

    masCodigo                      shift and go to state 32

state 11

    (4) codigo -> condiciones . masCodigo
    (12) masCodigo -> . SEMICOLON
    (13) masCodigo -> . SEMICOLON codigo

    SEMICOLON       shift and go to state 31

    masCodigo                      shift and go to state 33

state 12

    (5) codigo -> asignacion . masCodigo
    (12) masCodigo -> . SEMICOLON
    (13) masCodigo -> . SEMICOLON codigo

    SEMICOLON       shift and go to state 31

    masCodigo                      shift and go to state 34

state 13

    (6) codigo -> estrFor .

    RCURLYBRACKET   reduce using rule 6 (codigo -> estrFor .)


state 14

    (7) codigo -> estrWhile .

    RCURLYBRACKET   reduce using rule 7 (codigo -> estrWhile .)


state 15

    (8) codigo -> input . masCodigo
    (12) masCodigo -> . SEMICOLON
    (13) masCodigo -> . SEMICOLON codigo

    SEMICOLON       shift and go to state 31

    masCodigo                      shift and go to state 35

state 16

    (9) codigo -> funciones .

    RCURLYBRACKET   reduce using rule 9 (codigo -> funciones .)


state 17

    (14) expresionAritmetica -> valor . operador valor
    (15) expresionAritmetica -> valor . operador expresionAritmetica
    (28) condicion -> valor . operComp valor
    (16) operador -> . PLUS
    (17) operador -> . MINUS
    (18) operador -> . MULT
    (19) operador -> . DIVIDE
    (20) operador -> . MOD
    (29) operComp -> . GREATERTHAN
    (30) operComp -> . LESSTHAN
    (31) operComp -> . EQUALITY
    (32) operComp -> . DIFFERENTFROM
    (33) operComp -> . GREATEREQUALSTHAN
    (34) operComp -> . LESSEQUALSTHAN

    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    MULT            shift and go to state 40
    DIVIDE          shift and go to state 41
    MOD             shift and go to state 42
    GREATERTHAN     shift and go to state 43
    LESSTHAN        shift and go to state 44
    EQUALITY        shift and go to state 45
    DIFFERENTFROM   shift and go to state 46
    GREATEREQUALSTHAN shift and go to state 47
    LESSEQUALSTHAN  shift and go to state 48

    operador                       shift and go to state 36
    operComp                       shift and go to state 37

state 18

    (26) impresion -> PRINTLN . NOT LPAREN valores RPAREN

    NOT             shift and go to state 49


state 19

    (35) condiciones -> condicion .
    (36) condiciones -> condicion . conector condiciones
    (39) conector -> . AND
    (40) conector -> . OR

    SEMICOLON       reduce using rule 35 (condiciones -> condicion .)
    LCURLYBRACKET   reduce using rule 35 (condiciones -> condicion .)
    AND             shift and go to state 51
    OR              shift and go to state 52

    conector                       shift and go to state 50

state 20

    (41) asignacion -> LET . ID ASSIGN valor
    (42) asignacion -> LET . ID ASSIGN condiciones
    (43) asignacion -> LET . ID ASSIGN expresionAritmetica
    (44) asignacion -> LET . ID ASSIGN estructuras

    ID              shift and go to state 53


state 21

    (53) estrFor -> FOR . ID IN ID LCURLYBRACKET codigo RCURLYBRACKET
    (54) estrFor -> FOR . ID IN ID LCURLYBRACKET codigo RCURLYBRACKET codigo

    ID              shift and go to state 54


state 22

    (51) estrWhile -> WHILE . condiciones LCURLYBRACKET codigo RCURLYBRACKET
    (52) estrWhile -> WHILE . condiciones LCURLYBRACKET codigo RCURLYBRACKET codigo
    (35) condiciones -> . condicion
    (36) condiciones -> . condicion conector condiciones
    (28) condicion -> . valor operComp valor
    (37) condicion -> . TRUE
    (38) condicion -> . FALSE
    (21) valor -> . INTEGER
    (22) valor -> . FLOAT
    (23) valor -> . ID

    TRUE            shift and go to state 27
    FALSE           shift and go to state 28
    INTEGER         shift and go to state 25
    FLOAT           shift and go to state 26
    ID              shift and go to state 7

    condiciones                    shift and go to state 55
    condicion                      shift and go to state 19
    valor                          shift and go to state 56

state 23

    (27) input -> STD . COLON COLON IO COLON COLON STDIN LPAREN RPAREN DOT READLINE LPAREN REF MUT ID RPAREN

    COLON           shift and go to state 57


state 24

    (10) funciones -> funcion .
    (11) funciones -> funcion . funciones
    (10) funciones -> . funcion
    (11) funciones -> . funcion funciones
    (1) funcion -> . FN ID LPAREN RPAREN LCURLYBRACKET codigo RCURLYBRACKET

    RCURLYBRACKET   reduce using rule 10 (funciones -> funcion .)
    FN              shift and go to state 2

    funcion                        shift and go to state 24
    funciones                      shift and go to state 58

state 25

    (21) valor -> INTEGER .

    PLUS            reduce using rule 21 (valor -> INTEGER .)
    MINUS           reduce using rule 21 (valor -> INTEGER .)
    MULT            reduce using rule 21 (valor -> INTEGER .)
    DIVIDE          reduce using rule 21 (valor -> INTEGER .)
    MOD             reduce using rule 21 (valor -> INTEGER .)
    GREATERTHAN     reduce using rule 21 (valor -> INTEGER .)
    LESSTHAN        reduce using rule 21 (valor -> INTEGER .)
    EQUALITY        reduce using rule 21 (valor -> INTEGER .)
    DIFFERENTFROM   reduce using rule 21 (valor -> INTEGER .)
    GREATEREQUALSTHAN reduce using rule 21 (valor -> INTEGER .)
    LESSEQUALSTHAN  reduce using rule 21 (valor -> INTEGER .)
    SEMICOLON       reduce using rule 21 (valor -> INTEGER .)
    AND             reduce using rule 21 (valor -> INTEGER .)
    OR              reduce using rule 21 (valor -> INTEGER .)
    LCURLYBRACKET   reduce using rule 21 (valor -> INTEGER .)
    COMMA           reduce using rule 21 (valor -> INTEGER .)
    RPAREN          reduce using rule 21 (valor -> INTEGER .)
    RBRACKET        reduce using rule 21 (valor -> INTEGER .)


state 26

    (22) valor -> FLOAT .

    PLUS            reduce using rule 22 (valor -> FLOAT .)
    MINUS           reduce using rule 22 (valor -> FLOAT .)
    MULT            reduce using rule 22 (valor -> FLOAT .)
    DIVIDE          reduce using rule 22 (valor -> FLOAT .)
    MOD             reduce using rule 22 (valor -> FLOAT .)
    GREATERTHAN     reduce using rule 22 (valor -> FLOAT .)
    LESSTHAN        reduce using rule 22 (valor -> FLOAT .)
    EQUALITY        reduce using rule 22 (valor -> FLOAT .)
    DIFFERENTFROM   reduce using rule 22 (valor -> FLOAT .)
    GREATEREQUALSTHAN reduce using rule 22 (valor -> FLOAT .)
    LESSEQUALSTHAN  reduce using rule 22 (valor -> FLOAT .)
    SEMICOLON       reduce using rule 22 (valor -> FLOAT .)
    AND             reduce using rule 22 (valor -> FLOAT .)
    OR              reduce using rule 22 (valor -> FLOAT .)
    LCURLYBRACKET   reduce using rule 22 (valor -> FLOAT .)
    COMMA           reduce using rule 22 (valor -> FLOAT .)
    RPAREN          reduce using rule 22 (valor -> FLOAT .)
    RBRACKET        reduce using rule 22 (valor -> FLOAT .)


state 27

    (37) condicion -> TRUE .

    AND             reduce using rule 37 (condicion -> TRUE .)
    OR              reduce using rule 37 (condicion -> TRUE .)
    SEMICOLON       reduce using rule 37 (condicion -> TRUE .)
    LCURLYBRACKET   reduce using rule 37 (condicion -> TRUE .)


state 28

    (38) condicion -> FALSE .

    AND             reduce using rule 38 (condicion -> FALSE .)
    OR              reduce using rule 38 (condicion -> FALSE .)
    SEMICOLON       reduce using rule 38 (condicion -> FALSE .)
    LCURLYBRACKET   reduce using rule 38 (condicion -> FALSE .)


state 29

    (1) funcion -> FN ID LPAREN RPAREN LCURLYBRACKET codigo RCURLYBRACKET .

    $end            reduce using rule 1 (funcion -> FN ID LPAREN RPAREN LCURLYBRACKET codigo RCURLYBRACKET .)
    FN              reduce using rule 1 (funcion -> FN ID LPAREN RPAREN LCURLYBRACKET codigo RCURLYBRACKET .)
    RCURLYBRACKET   reduce using rule 1 (funcion -> FN ID LPAREN RPAREN LCURLYBRACKET codigo RCURLYBRACKET .)


state 30

    (2) codigo -> expresionAritmetica masCodigo .

    RCURLYBRACKET   reduce using rule 2 (codigo -> expresionAritmetica masCodigo .)


state 31

    (12) masCodigo -> SEMICOLON .
    (13) masCodigo -> SEMICOLON . codigo
    (2) codigo -> . expresionAritmetica masCodigo
    (3) codigo -> . impresion masCodigo
    (4) codigo -> . condiciones masCodigo
    (5) codigo -> . asignacion masCodigo
    (6) codigo -> . estrFor
    (7) codigo -> . estrWhile
    (8) codigo -> . input masCodigo
    (9) codigo -> . funciones
    (14) expresionAritmetica -> . valor operador valor
    (15) expresionAritmetica -> . valor operador expresionAritmetica
    (26) impresion -> . PRINTLN NOT LPAREN valores RPAREN
    (35) condiciones -> . condicion
    (36) condiciones -> . condicion conector condiciones
    (41) asignacion -> . LET ID ASSIGN valor
    (42) asignacion -> . LET ID ASSIGN condiciones
    (43) asignacion -> . LET ID ASSIGN expresionAritmetica
    (44) asignacion -> . LET ID ASSIGN estructuras
    (53) estrFor -> . FOR ID IN ID LCURLYBRACKET codigo RCURLYBRACKET
    (54) estrFor -> . FOR ID IN ID LCURLYBRACKET codigo RCURLYBRACKET codigo
    (51) estrWhile -> . WHILE condiciones LCURLYBRACKET codigo RCURLYBRACKET
    (52) estrWhile -> . WHILE condiciones LCURLYBRACKET codigo RCURLYBRACKET codigo
    (27) input -> . STD COLON COLON IO COLON COLON STDIN LPAREN RPAREN DOT READLINE LPAREN REF MUT ID RPAREN
    (10) funciones -> . funcion
    (11) funciones -> . funcion funciones
    (21) valor -> . INTEGER
    (22) valor -> . FLOAT
    (23) valor -> . ID
    (28) condicion -> . valor operComp valor
    (37) condicion -> . TRUE
    (38) condicion -> . FALSE
    (1) funcion -> . FN ID LPAREN RPAREN LCURLYBRACKET codigo RCURLYBRACKET

    RCURLYBRACKET   reduce using rule 12 (masCodigo -> SEMICOLON .)
    PRINTLN         shift and go to state 18
    LET             shift and go to state 20
    FOR             shift and go to state 21
    WHILE           shift and go to state 22
    STD             shift and go to state 23
    INTEGER         shift and go to state 25
    FLOAT           shift and go to state 26
    ID              shift and go to state 7
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28
    FN              shift and go to state 2

    codigo                         shift and go to state 59
    expresionAritmetica            shift and go to state 9
    impresion                      shift and go to state 10
    condiciones                    shift and go to state 11
    asignacion                     shift and go to state 12
    estrFor                        shift and go to state 13
    estrWhile                      shift and go to state 14
    input                          shift and go to state 15
    funciones                      shift and go to state 16
    valor                          shift and go to state 17
    condicion                      shift and go to state 19
    funcion                        shift and go to state 24

state 32

    (3) codigo -> impresion masCodigo .

    RCURLYBRACKET   reduce using rule 3 (codigo -> impresion masCodigo .)


state 33

    (4) codigo -> condiciones masCodigo .

    RCURLYBRACKET   reduce using rule 4 (codigo -> condiciones masCodigo .)


state 34

    (5) codigo -> asignacion masCodigo .

    RCURLYBRACKET   reduce using rule 5 (codigo -> asignacion masCodigo .)


state 35

    (8) codigo -> input masCodigo .

    RCURLYBRACKET   reduce using rule 8 (codigo -> input masCodigo .)


state 36

    (14) expresionAritmetica -> valor operador . valor
    (15) expresionAritmetica -> valor operador . expresionAritmetica
    (21) valor -> . INTEGER
    (22) valor -> . FLOAT
    (23) valor -> . ID
    (14) expresionAritmetica -> . valor operador valor
    (15) expresionAritmetica -> . valor operador expresionAritmetica

    INTEGER         shift and go to state 25
    FLOAT           shift and go to state 26
    ID              shift and go to state 7

    valor                          shift and go to state 60
    expresionAritmetica            shift and go to state 61

state 37

    (28) condicion -> valor operComp . valor
    (21) valor -> . INTEGER
    (22) valor -> . FLOAT
    (23) valor -> . ID

    INTEGER         shift and go to state 25
    FLOAT           shift and go to state 26
    ID              shift and go to state 7

    valor                          shift and go to state 62

state 38

    (16) operador -> PLUS .

    INTEGER         reduce using rule 16 (operador -> PLUS .)
    FLOAT           reduce using rule 16 (operador -> PLUS .)
    ID              reduce using rule 16 (operador -> PLUS .)


state 39

    (17) operador -> MINUS .

    INTEGER         reduce using rule 17 (operador -> MINUS .)
    FLOAT           reduce using rule 17 (operador -> MINUS .)
    ID              reduce using rule 17 (operador -> MINUS .)


state 40

    (18) operador -> MULT .

    INTEGER         reduce using rule 18 (operador -> MULT .)
    FLOAT           reduce using rule 18 (operador -> MULT .)
    ID              reduce using rule 18 (operador -> MULT .)


state 41

    (19) operador -> DIVIDE .

    INTEGER         reduce using rule 19 (operador -> DIVIDE .)
    FLOAT           reduce using rule 19 (operador -> DIVIDE .)
    ID              reduce using rule 19 (operador -> DIVIDE .)


state 42

    (20) operador -> MOD .

    INTEGER         reduce using rule 20 (operador -> MOD .)
    FLOAT           reduce using rule 20 (operador -> MOD .)
    ID              reduce using rule 20 (operador -> MOD .)


state 43

    (29) operComp -> GREATERTHAN .

    INTEGER         reduce using rule 29 (operComp -> GREATERTHAN .)
    FLOAT           reduce using rule 29 (operComp -> GREATERTHAN .)
    ID              reduce using rule 29 (operComp -> GREATERTHAN .)


state 44

    (30) operComp -> LESSTHAN .

    INTEGER         reduce using rule 30 (operComp -> LESSTHAN .)
    FLOAT           reduce using rule 30 (operComp -> LESSTHAN .)
    ID              reduce using rule 30 (operComp -> LESSTHAN .)


state 45

    (31) operComp -> EQUALITY .

    INTEGER         reduce using rule 31 (operComp -> EQUALITY .)
    FLOAT           reduce using rule 31 (operComp -> EQUALITY .)
    ID              reduce using rule 31 (operComp -> EQUALITY .)


state 46

    (32) operComp -> DIFFERENTFROM .

    INTEGER         reduce using rule 32 (operComp -> DIFFERENTFROM .)
    FLOAT           reduce using rule 32 (operComp -> DIFFERENTFROM .)
    ID              reduce using rule 32 (operComp -> DIFFERENTFROM .)


state 47

    (33) operComp -> GREATEREQUALSTHAN .

    INTEGER         reduce using rule 33 (operComp -> GREATEREQUALSTHAN .)
    FLOAT           reduce using rule 33 (operComp -> GREATEREQUALSTHAN .)
    ID              reduce using rule 33 (operComp -> GREATEREQUALSTHAN .)


state 48

    (34) operComp -> LESSEQUALSTHAN .

    INTEGER         reduce using rule 34 (operComp -> LESSEQUALSTHAN .)
    FLOAT           reduce using rule 34 (operComp -> LESSEQUALSTHAN .)
    ID              reduce using rule 34 (operComp -> LESSEQUALSTHAN .)


state 49

    (26) impresion -> PRINTLN NOT . LPAREN valores RPAREN

    LPAREN          shift and go to state 63


state 50

    (36) condiciones -> condicion conector . condiciones
    (35) condiciones -> . condicion
    (36) condiciones -> . condicion conector condiciones
    (28) condicion -> . valor operComp valor
    (37) condicion -> . TRUE
    (38) condicion -> . FALSE
    (21) valor -> . INTEGER
    (22) valor -> . FLOAT
    (23) valor -> . ID

    TRUE            shift and go to state 27
    FALSE           shift and go to state 28
    INTEGER         shift and go to state 25
    FLOAT           shift and go to state 26
    ID              shift and go to state 7

    condicion                      shift and go to state 19
    condiciones                    shift and go to state 64
    valor                          shift and go to state 56

state 51

    (39) conector -> AND .

    TRUE            reduce using rule 39 (conector -> AND .)
    FALSE           reduce using rule 39 (conector -> AND .)
    INTEGER         reduce using rule 39 (conector -> AND .)
    FLOAT           reduce using rule 39 (conector -> AND .)
    ID              reduce using rule 39 (conector -> AND .)


state 52

    (40) conector -> OR .

    TRUE            reduce using rule 40 (conector -> OR .)
    FALSE           reduce using rule 40 (conector -> OR .)
    INTEGER         reduce using rule 40 (conector -> OR .)
    FLOAT           reduce using rule 40 (conector -> OR .)
    ID              reduce using rule 40 (conector -> OR .)


state 53

    (41) asignacion -> LET ID . ASSIGN valor
    (42) asignacion -> LET ID . ASSIGN condiciones
    (43) asignacion -> LET ID . ASSIGN expresionAritmetica
    (44) asignacion -> LET ID . ASSIGN estructuras

    ASSIGN          shift and go to state 65


state 54

    (53) estrFor -> FOR ID . IN ID LCURLYBRACKET codigo RCURLYBRACKET
    (54) estrFor -> FOR ID . IN ID LCURLYBRACKET codigo RCURLYBRACKET codigo

    IN              shift and go to state 66


state 55

    (51) estrWhile -> WHILE condiciones . LCURLYBRACKET codigo RCURLYBRACKET
    (52) estrWhile -> WHILE condiciones . LCURLYBRACKET codigo RCURLYBRACKET codigo

    LCURLYBRACKET   shift and go to state 67


state 56

    (28) condicion -> valor . operComp valor
    (29) operComp -> . GREATERTHAN
    (30) operComp -> . LESSTHAN
    (31) operComp -> . EQUALITY
    (32) operComp -> . DIFFERENTFROM
    (33) operComp -> . GREATEREQUALSTHAN
    (34) operComp -> . LESSEQUALSTHAN

    GREATERTHAN     shift and go to state 43
    LESSTHAN        shift and go to state 44
    EQUALITY        shift and go to state 45
    DIFFERENTFROM   shift and go to state 46
    GREATEREQUALSTHAN shift and go to state 47
    LESSEQUALSTHAN  shift and go to state 48

    operComp                       shift and go to state 37

state 57

    (27) input -> STD COLON . COLON IO COLON COLON STDIN LPAREN RPAREN DOT READLINE LPAREN REF MUT ID RPAREN

    COLON           shift and go to state 68


state 58

    (11) funciones -> funcion funciones .

    RCURLYBRACKET   reduce using rule 11 (funciones -> funcion funciones .)


state 59

    (13) masCodigo -> SEMICOLON codigo .

    RCURLYBRACKET   reduce using rule 13 (masCodigo -> SEMICOLON codigo .)


state 60

    (14) expresionAritmetica -> valor operador valor .
    (14) expresionAritmetica -> valor . operador valor
    (15) expresionAritmetica -> valor . operador expresionAritmetica
    (16) operador -> . PLUS
    (17) operador -> . MINUS
    (18) operador -> . MULT
    (19) operador -> . DIVIDE
    (20) operador -> . MOD

    SEMICOLON       reduce using rule 14 (expresionAritmetica -> valor operador valor .)
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    MULT            shift and go to state 40
    DIVIDE          shift and go to state 41
    MOD             shift and go to state 42

    operador                       shift and go to state 36

state 61

    (15) expresionAritmetica -> valor operador expresionAritmetica .

    SEMICOLON       reduce using rule 15 (expresionAritmetica -> valor operador expresionAritmetica .)


state 62

    (28) condicion -> valor operComp valor .

    AND             reduce using rule 28 (condicion -> valor operComp valor .)
    OR              reduce using rule 28 (condicion -> valor operComp valor .)
    SEMICOLON       reduce using rule 28 (condicion -> valor operComp valor .)
    LCURLYBRACKET   reduce using rule 28 (condicion -> valor operComp valor .)


state 63

    (26) impresion -> PRINTLN NOT LPAREN . valores RPAREN
    (24) valores -> . valor
    (25) valores -> . valor COMMA valores
    (21) valor -> . INTEGER
    (22) valor -> . FLOAT
    (23) valor -> . ID

    INTEGER         shift and go to state 25
    FLOAT           shift and go to state 26
    ID              shift and go to state 7

    valores                        shift and go to state 69
    valor                          shift and go to state 70

state 64

    (36) condiciones -> condicion conector condiciones .

    SEMICOLON       reduce using rule 36 (condiciones -> condicion conector condiciones .)
    LCURLYBRACKET   reduce using rule 36 (condiciones -> condicion conector condiciones .)


state 65

    (41) asignacion -> LET ID ASSIGN . valor
    (42) asignacion -> LET ID ASSIGN . condiciones
    (43) asignacion -> LET ID ASSIGN . expresionAritmetica
    (44) asignacion -> LET ID ASSIGN . estructuras
    (21) valor -> . INTEGER
    (22) valor -> . FLOAT
    (23) valor -> . ID
    (35) condiciones -> . condicion
    (36) condiciones -> . condicion conector condiciones
    (14) expresionAritmetica -> . valor operador valor
    (15) expresionAritmetica -> . valor operador expresionAritmetica
    (45) estructuras -> . tupla
    (46) estructuras -> . array
    (28) condicion -> . valor operComp valor
    (37) condicion -> . TRUE
    (38) condicion -> . FALSE
    (47) tupla -> . LPAREN valores RPAREN
    (48) tupla -> . LPAREN RPAREN
    (49) array -> . LBRACKET valores RBRACKET
    (50) array -> . LBRACKET RBRACKET

    INTEGER         shift and go to state 25
    FLOAT           shift and go to state 26
    ID              shift and go to state 7
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28
    LPAREN          shift and go to state 77
    LBRACKET        shift and go to state 78

    valor                          shift and go to state 71
    condiciones                    shift and go to state 72
    expresionAritmetica            shift and go to state 73
    estructuras                    shift and go to state 74
    condicion                      shift and go to state 19
    tupla                          shift and go to state 75
    array                          shift and go to state 76

state 66

    (53) estrFor -> FOR ID IN . ID LCURLYBRACKET codigo RCURLYBRACKET
    (54) estrFor -> FOR ID IN . ID LCURLYBRACKET codigo RCURLYBRACKET codigo

    ID              shift and go to state 79


state 67

    (51) estrWhile -> WHILE condiciones LCURLYBRACKET . codigo RCURLYBRACKET
    (52) estrWhile -> WHILE condiciones LCURLYBRACKET . codigo RCURLYBRACKET codigo
    (2) codigo -> . expresionAritmetica masCodigo
    (3) codigo -> . impresion masCodigo
    (4) codigo -> . condiciones masCodigo
    (5) codigo -> . asignacion masCodigo
    (6) codigo -> . estrFor
    (7) codigo -> . estrWhile
    (8) codigo -> . input masCodigo
    (9) codigo -> . funciones
    (14) expresionAritmetica -> . valor operador valor
    (15) expresionAritmetica -> . valor operador expresionAritmetica
    (26) impresion -> . PRINTLN NOT LPAREN valores RPAREN
    (35) condiciones -> . condicion
    (36) condiciones -> . condicion conector condiciones
    (41) asignacion -> . LET ID ASSIGN valor
    (42) asignacion -> . LET ID ASSIGN condiciones
    (43) asignacion -> . LET ID ASSIGN expresionAritmetica
    (44) asignacion -> . LET ID ASSIGN estructuras
    (53) estrFor -> . FOR ID IN ID LCURLYBRACKET codigo RCURLYBRACKET
    (54) estrFor -> . FOR ID IN ID LCURLYBRACKET codigo RCURLYBRACKET codigo
    (51) estrWhile -> . WHILE condiciones LCURLYBRACKET codigo RCURLYBRACKET
    (52) estrWhile -> . WHILE condiciones LCURLYBRACKET codigo RCURLYBRACKET codigo
    (27) input -> . STD COLON COLON IO COLON COLON STDIN LPAREN RPAREN DOT READLINE LPAREN REF MUT ID RPAREN
    (10) funciones -> . funcion
    (11) funciones -> . funcion funciones
    (21) valor -> . INTEGER
    (22) valor -> . FLOAT
    (23) valor -> . ID
    (28) condicion -> . valor operComp valor
    (37) condicion -> . TRUE
    (38) condicion -> . FALSE
    (1) funcion -> . FN ID LPAREN RPAREN LCURLYBRACKET codigo RCURLYBRACKET

    PRINTLN         shift and go to state 18
    LET             shift and go to state 20
    FOR             shift and go to state 21
    WHILE           shift and go to state 22
    STD             shift and go to state 23
    INTEGER         shift and go to state 25
    FLOAT           shift and go to state 26
    ID              shift and go to state 7
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28
    FN              shift and go to state 2

    condiciones                    shift and go to state 11
    codigo                         shift and go to state 80
    expresionAritmetica            shift and go to state 9
    impresion                      shift and go to state 10
    asignacion                     shift and go to state 12
    estrFor                        shift and go to state 13
    estrWhile                      shift and go to state 14
    input                          shift and go to state 15
    funciones                      shift and go to state 16
    valor                          shift and go to state 17
    condicion                      shift and go to state 19
    funcion                        shift and go to state 24

state 68

    (27) input -> STD COLON COLON . IO COLON COLON STDIN LPAREN RPAREN DOT READLINE LPAREN REF MUT ID RPAREN

    IO              shift and go to state 81


state 69

    (26) impresion -> PRINTLN NOT LPAREN valores . RPAREN

    RPAREN          shift and go to state 82


state 70

    (24) valores -> valor .
    (25) valores -> valor . COMMA valores

    RPAREN          reduce using rule 24 (valores -> valor .)
    RBRACKET        reduce using rule 24 (valores -> valor .)
    COMMA           shift and go to state 83


state 71

    (41) asignacion -> LET ID ASSIGN valor .
    (14) expresionAritmetica -> valor . operador valor
    (15) expresionAritmetica -> valor . operador expresionAritmetica
    (28) condicion -> valor . operComp valor
    (16) operador -> . PLUS
    (17) operador -> . MINUS
    (18) operador -> . MULT
    (19) operador -> . DIVIDE
    (20) operador -> . MOD
    (29) operComp -> . GREATERTHAN
    (30) operComp -> . LESSTHAN
    (31) operComp -> . EQUALITY
    (32) operComp -> . DIFFERENTFROM
    (33) operComp -> . GREATEREQUALSTHAN
    (34) operComp -> . LESSEQUALSTHAN

    SEMICOLON       reduce using rule 41 (asignacion -> LET ID ASSIGN valor .)
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    MULT            shift and go to state 40
    DIVIDE          shift and go to state 41
    MOD             shift and go to state 42
    GREATERTHAN     shift and go to state 43
    LESSTHAN        shift and go to state 44
    EQUALITY        shift and go to state 45
    DIFFERENTFROM   shift and go to state 46
    GREATEREQUALSTHAN shift and go to state 47
    LESSEQUALSTHAN  shift and go to state 48

    operador                       shift and go to state 36
    operComp                       shift and go to state 37

state 72

    (42) asignacion -> LET ID ASSIGN condiciones .

    SEMICOLON       reduce using rule 42 (asignacion -> LET ID ASSIGN condiciones .)


state 73

    (43) asignacion -> LET ID ASSIGN expresionAritmetica .

    SEMICOLON       reduce using rule 43 (asignacion -> LET ID ASSIGN expresionAritmetica .)


state 74

    (44) asignacion -> LET ID ASSIGN estructuras .

    SEMICOLON       reduce using rule 44 (asignacion -> LET ID ASSIGN estructuras .)


state 75

    (45) estructuras -> tupla .

    SEMICOLON       reduce using rule 45 (estructuras -> tupla .)


state 76

    (46) estructuras -> array .

    SEMICOLON       reduce using rule 46 (estructuras -> array .)


state 77

    (47) tupla -> LPAREN . valores RPAREN
    (48) tupla -> LPAREN . RPAREN
    (24) valores -> . valor
    (25) valores -> . valor COMMA valores
    (21) valor -> . INTEGER
    (22) valor -> . FLOAT
    (23) valor -> . ID

    RPAREN          shift and go to state 85
    INTEGER         shift and go to state 25
    FLOAT           shift and go to state 26
    ID              shift and go to state 7

    valores                        shift and go to state 84
    valor                          shift and go to state 70

state 78

    (49) array -> LBRACKET . valores RBRACKET
    (50) array -> LBRACKET . RBRACKET
    (24) valores -> . valor
    (25) valores -> . valor COMMA valores
    (21) valor -> . INTEGER
    (22) valor -> . FLOAT
    (23) valor -> . ID

    RBRACKET        shift and go to state 87
    INTEGER         shift and go to state 25
    FLOAT           shift and go to state 26
    ID              shift and go to state 7

    valores                        shift and go to state 86
    valor                          shift and go to state 70

state 79

    (53) estrFor -> FOR ID IN ID . LCURLYBRACKET codigo RCURLYBRACKET
    (54) estrFor -> FOR ID IN ID . LCURLYBRACKET codigo RCURLYBRACKET codigo

    LCURLYBRACKET   shift and go to state 88


state 80

    (51) estrWhile -> WHILE condiciones LCURLYBRACKET codigo . RCURLYBRACKET
    (52) estrWhile -> WHILE condiciones LCURLYBRACKET codigo . RCURLYBRACKET codigo

    RCURLYBRACKET   shift and go to state 89


state 81

    (27) input -> STD COLON COLON IO . COLON COLON STDIN LPAREN RPAREN DOT READLINE LPAREN REF MUT ID RPAREN

    COLON           shift and go to state 90


state 82

    (26) impresion -> PRINTLN NOT LPAREN valores RPAREN .

    SEMICOLON       reduce using rule 26 (impresion -> PRINTLN NOT LPAREN valores RPAREN .)


state 83

    (25) valores -> valor COMMA . valores
    (24) valores -> . valor
    (25) valores -> . valor COMMA valores
    (21) valor -> . INTEGER
    (22) valor -> . FLOAT
    (23) valor -> . ID

    INTEGER         shift and go to state 25
    FLOAT           shift and go to state 26
    ID              shift and go to state 7

    valor                          shift and go to state 70
    valores                        shift and go to state 91

state 84

    (47) tupla -> LPAREN valores . RPAREN

    RPAREN          shift and go to state 92


state 85

    (48) tupla -> LPAREN RPAREN .

    SEMICOLON       reduce using rule 48 (tupla -> LPAREN RPAREN .)


state 86

    (49) array -> LBRACKET valores . RBRACKET

    RBRACKET        shift and go to state 93


state 87

    (50) array -> LBRACKET RBRACKET .

    SEMICOLON       reduce using rule 50 (array -> LBRACKET RBRACKET .)


state 88

    (53) estrFor -> FOR ID IN ID LCURLYBRACKET . codigo RCURLYBRACKET
    (54) estrFor -> FOR ID IN ID LCURLYBRACKET . codigo RCURLYBRACKET codigo
    (2) codigo -> . expresionAritmetica masCodigo
    (3) codigo -> . impresion masCodigo
    (4) codigo -> . condiciones masCodigo
    (5) codigo -> . asignacion masCodigo
    (6) codigo -> . estrFor
    (7) codigo -> . estrWhile
    (8) codigo -> . input masCodigo
    (9) codigo -> . funciones
    (14) expresionAritmetica -> . valor operador valor
    (15) expresionAritmetica -> . valor operador expresionAritmetica
    (26) impresion -> . PRINTLN NOT LPAREN valores RPAREN
    (35) condiciones -> . condicion
    (36) condiciones -> . condicion conector condiciones
    (41) asignacion -> . LET ID ASSIGN valor
    (42) asignacion -> . LET ID ASSIGN condiciones
    (43) asignacion -> . LET ID ASSIGN expresionAritmetica
    (44) asignacion -> . LET ID ASSIGN estructuras
    (53) estrFor -> . FOR ID IN ID LCURLYBRACKET codigo RCURLYBRACKET
    (54) estrFor -> . FOR ID IN ID LCURLYBRACKET codigo RCURLYBRACKET codigo
    (51) estrWhile -> . WHILE condiciones LCURLYBRACKET codigo RCURLYBRACKET
    (52) estrWhile -> . WHILE condiciones LCURLYBRACKET codigo RCURLYBRACKET codigo
    (27) input -> . STD COLON COLON IO COLON COLON STDIN LPAREN RPAREN DOT READLINE LPAREN REF MUT ID RPAREN
    (10) funciones -> . funcion
    (11) funciones -> . funcion funciones
    (21) valor -> . INTEGER
    (22) valor -> . FLOAT
    (23) valor -> . ID
    (28) condicion -> . valor operComp valor
    (37) condicion -> . TRUE
    (38) condicion -> . FALSE
    (1) funcion -> . FN ID LPAREN RPAREN LCURLYBRACKET codigo RCURLYBRACKET

    PRINTLN         shift and go to state 18
    LET             shift and go to state 20
    FOR             shift and go to state 21
    WHILE           shift and go to state 22
    STD             shift and go to state 23
    INTEGER         shift and go to state 25
    FLOAT           shift and go to state 26
    ID              shift and go to state 7
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28
    FN              shift and go to state 2

    codigo                         shift and go to state 94
    expresionAritmetica            shift and go to state 9
    impresion                      shift and go to state 10
    condiciones                    shift and go to state 11
    asignacion                     shift and go to state 12
    estrFor                        shift and go to state 13
    estrWhile                      shift and go to state 14
    input                          shift and go to state 15
    funciones                      shift and go to state 16
    valor                          shift and go to state 17
    condicion                      shift and go to state 19
    funcion                        shift and go to state 24

state 89

    (51) estrWhile -> WHILE condiciones LCURLYBRACKET codigo RCURLYBRACKET .
    (52) estrWhile -> WHILE condiciones LCURLYBRACKET codigo RCURLYBRACKET . codigo
    (2) codigo -> . expresionAritmetica masCodigo
    (3) codigo -> . impresion masCodigo
    (4) codigo -> . condiciones masCodigo
    (5) codigo -> . asignacion masCodigo
    (6) codigo -> . estrFor
    (7) codigo -> . estrWhile
    (8) codigo -> . input masCodigo
    (9) codigo -> . funciones
    (14) expresionAritmetica -> . valor operador valor
    (15) expresionAritmetica -> . valor operador expresionAritmetica
    (26) impresion -> . PRINTLN NOT LPAREN valores RPAREN
    (35) condiciones -> . condicion
    (36) condiciones -> . condicion conector condiciones
    (41) asignacion -> . LET ID ASSIGN valor
    (42) asignacion -> . LET ID ASSIGN condiciones
    (43) asignacion -> . LET ID ASSIGN expresionAritmetica
    (44) asignacion -> . LET ID ASSIGN estructuras
    (53) estrFor -> . FOR ID IN ID LCURLYBRACKET codigo RCURLYBRACKET
    (54) estrFor -> . FOR ID IN ID LCURLYBRACKET codigo RCURLYBRACKET codigo
    (51) estrWhile -> . WHILE condiciones LCURLYBRACKET codigo RCURLYBRACKET
    (52) estrWhile -> . WHILE condiciones LCURLYBRACKET codigo RCURLYBRACKET codigo
    (27) input -> . STD COLON COLON IO COLON COLON STDIN LPAREN RPAREN DOT READLINE LPAREN REF MUT ID RPAREN
    (10) funciones -> . funcion
    (11) funciones -> . funcion funciones
    (21) valor -> . INTEGER
    (22) valor -> . FLOAT
    (23) valor -> . ID
    (28) condicion -> . valor operComp valor
    (37) condicion -> . TRUE
    (38) condicion -> . FALSE
    (1) funcion -> . FN ID LPAREN RPAREN LCURLYBRACKET codigo RCURLYBRACKET

    RCURLYBRACKET   reduce using rule 51 (estrWhile -> WHILE condiciones LCURLYBRACKET codigo RCURLYBRACKET .)
    PRINTLN         shift and go to state 18
    LET             shift and go to state 20
    FOR             shift and go to state 21
    WHILE           shift and go to state 22
    STD             shift and go to state 23
    INTEGER         shift and go to state 25
    FLOAT           shift and go to state 26
    ID              shift and go to state 7
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28
    FN              shift and go to state 2

    condiciones                    shift and go to state 11
    codigo                         shift and go to state 95
    expresionAritmetica            shift and go to state 9
    impresion                      shift and go to state 10
    asignacion                     shift and go to state 12
    estrFor                        shift and go to state 13
    estrWhile                      shift and go to state 14
    input                          shift and go to state 15
    funciones                      shift and go to state 16
    valor                          shift and go to state 17
    condicion                      shift and go to state 19
    funcion                        shift and go to state 24

state 90

    (27) input -> STD COLON COLON IO COLON . COLON STDIN LPAREN RPAREN DOT READLINE LPAREN REF MUT ID RPAREN

    COLON           shift and go to state 96


state 91

    (25) valores -> valor COMMA valores .

    RPAREN          reduce using rule 25 (valores -> valor COMMA valores .)
    RBRACKET        reduce using rule 25 (valores -> valor COMMA valores .)


state 92

    (47) tupla -> LPAREN valores RPAREN .

    SEMICOLON       reduce using rule 47 (tupla -> LPAREN valores RPAREN .)


state 93

    (49) array -> LBRACKET valores RBRACKET .

    SEMICOLON       reduce using rule 49 (array -> LBRACKET valores RBRACKET .)


state 94

    (53) estrFor -> FOR ID IN ID LCURLYBRACKET codigo . RCURLYBRACKET
    (54) estrFor -> FOR ID IN ID LCURLYBRACKET codigo . RCURLYBRACKET codigo

    RCURLYBRACKET   shift and go to state 97


state 95

    (52) estrWhile -> WHILE condiciones LCURLYBRACKET codigo RCURLYBRACKET codigo .

    RCURLYBRACKET   reduce using rule 52 (estrWhile -> WHILE condiciones LCURLYBRACKET codigo RCURLYBRACKET codigo .)


state 96

    (27) input -> STD COLON COLON IO COLON COLON . STDIN LPAREN RPAREN DOT READLINE LPAREN REF MUT ID RPAREN

    STDIN           shift and go to state 98


state 97

    (53) estrFor -> FOR ID IN ID LCURLYBRACKET codigo RCURLYBRACKET .
    (54) estrFor -> FOR ID IN ID LCURLYBRACKET codigo RCURLYBRACKET . codigo
    (2) codigo -> . expresionAritmetica masCodigo
    (3) codigo -> . impresion masCodigo
    (4) codigo -> . condiciones masCodigo
    (5) codigo -> . asignacion masCodigo
    (6) codigo -> . estrFor
    (7) codigo -> . estrWhile
    (8) codigo -> . input masCodigo
    (9) codigo -> . funciones
    (14) expresionAritmetica -> . valor operador valor
    (15) expresionAritmetica -> . valor operador expresionAritmetica
    (26) impresion -> . PRINTLN NOT LPAREN valores RPAREN
    (35) condiciones -> . condicion
    (36) condiciones -> . condicion conector condiciones
    (41) asignacion -> . LET ID ASSIGN valor
    (42) asignacion -> . LET ID ASSIGN condiciones
    (43) asignacion -> . LET ID ASSIGN expresionAritmetica
    (44) asignacion -> . LET ID ASSIGN estructuras
    (53) estrFor -> . FOR ID IN ID LCURLYBRACKET codigo RCURLYBRACKET
    (54) estrFor -> . FOR ID IN ID LCURLYBRACKET codigo RCURLYBRACKET codigo
    (51) estrWhile -> . WHILE condiciones LCURLYBRACKET codigo RCURLYBRACKET
    (52) estrWhile -> . WHILE condiciones LCURLYBRACKET codigo RCURLYBRACKET codigo
    (27) input -> . STD COLON COLON IO COLON COLON STDIN LPAREN RPAREN DOT READLINE LPAREN REF MUT ID RPAREN
    (10) funciones -> . funcion
    (11) funciones -> . funcion funciones
    (21) valor -> . INTEGER
    (22) valor -> . FLOAT
    (23) valor -> . ID
    (28) condicion -> . valor operComp valor
    (37) condicion -> . TRUE
    (38) condicion -> . FALSE
    (1) funcion -> . FN ID LPAREN RPAREN LCURLYBRACKET codigo RCURLYBRACKET

    RCURLYBRACKET   reduce using rule 53 (estrFor -> FOR ID IN ID LCURLYBRACKET codigo RCURLYBRACKET .)
    PRINTLN         shift and go to state 18
    LET             shift and go to state 20
    FOR             shift and go to state 21
    WHILE           shift and go to state 22
    STD             shift and go to state 23
    INTEGER         shift and go to state 25
    FLOAT           shift and go to state 26
    ID              shift and go to state 7
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28
    FN              shift and go to state 2

    codigo                         shift and go to state 99
    expresionAritmetica            shift and go to state 9
    impresion                      shift and go to state 10
    condiciones                    shift and go to state 11
    asignacion                     shift and go to state 12
    estrFor                        shift and go to state 13
    estrWhile                      shift and go to state 14
    input                          shift and go to state 15
    funciones                      shift and go to state 16
    valor                          shift and go to state 17
    condicion                      shift and go to state 19
    funcion                        shift and go to state 24

state 98

    (27) input -> STD COLON COLON IO COLON COLON STDIN . LPAREN RPAREN DOT READLINE LPAREN REF MUT ID RPAREN

    LPAREN          shift and go to state 100


state 99

    (54) estrFor -> FOR ID IN ID LCURLYBRACKET codigo RCURLYBRACKET codigo .

    RCURLYBRACKET   reduce using rule 54 (estrFor -> FOR ID IN ID LCURLYBRACKET codigo RCURLYBRACKET codigo .)


state 100

    (27) input -> STD COLON COLON IO COLON COLON STDIN LPAREN . RPAREN DOT READLINE LPAREN REF MUT ID RPAREN

    RPAREN          shift and go to state 101


state 101

    (27) input -> STD COLON COLON IO COLON COLON STDIN LPAREN RPAREN . DOT READLINE LPAREN REF MUT ID RPAREN

    DOT             shift and go to state 102


state 102

    (27) input -> STD COLON COLON IO COLON COLON STDIN LPAREN RPAREN DOT . READLINE LPAREN REF MUT ID RPAREN

    READLINE        shift and go to state 103


state 103

    (27) input -> STD COLON COLON IO COLON COLON STDIN LPAREN RPAREN DOT READLINE . LPAREN REF MUT ID RPAREN

    LPAREN          shift and go to state 104


state 104

    (27) input -> STD COLON COLON IO COLON COLON STDIN LPAREN RPAREN DOT READLINE LPAREN . REF MUT ID RPAREN

    REF             shift and go to state 105


state 105

    (27) input -> STD COLON COLON IO COLON COLON STDIN LPAREN RPAREN DOT READLINE LPAREN REF . MUT ID RPAREN

    MUT             shift and go to state 106


state 106

    (27) input -> STD COLON COLON IO COLON COLON STDIN LPAREN RPAREN DOT READLINE LPAREN REF MUT . ID RPAREN

    ID              shift and go to state 107


state 107

    (27) input -> STD COLON COLON IO COLON COLON STDIN LPAREN RPAREN DOT READLINE LPAREN REF MUT ID . RPAREN

    RPAREN          shift and go to state 108


state 108

    (27) input -> STD COLON COLON IO COLON COLON STDIN LPAREN RPAREN DOT READLINE LPAREN REF MUT ID RPAREN .

    SEMICOLON       reduce using rule 27 (input -> STD COLON COLON IO COLON COLON STDIN LPAREN RPAREN DOT READLINE LPAREN REF MUT ID RPAREN .)

