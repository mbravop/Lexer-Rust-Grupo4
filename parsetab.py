
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND AS ASSIGN ASYNC AWAIT BREAK COLON COMMA CONST CONTINUE CRATE DIFFERENTFROM DIVIDE DOT DOUBLECOLON DOUBLEQUOTE DYN ELSE ENUM EQUALITY EXTERN FALSE FLOAT FN FOR GREATEREQUALSTHAN GREATERTHAN ID IF IMPL IN INTEGER IO LBRACKET LCURLYBRACKET LESSEQUALSTHAN LESSTHAN LET LOOP LPAREN MATCH MINUS MOD MODULE MOVE MULT MUT NOT OR PLUS PRINT PRINTLN PUB RBRACKET RCURLYBRACKET READLINE REF RETURN RPAREN SEMICOLON SINGLEQUOTE STATIC STD STDIN STRUCT SUPER Self TRAIT TRUE TYPE UNSAFE USE WHERE WHILE selfcodigo : expresionAritmetica SEMICOLON\n              | impresion SEMICOLON\n              | condiciones SEMICOLON\n              | asignacion SEMICOLON\n              | estrFor\n              | estrWhile\n              | input SEMICOLONexpresionAritmetica : valor operador valor\n                           | valor operador expresionAritmeticaoperador : PLUS\n                | MINUS\n                | MULT\n                | DIVIDE\n                | MODvalor : INTEGER\n             | FLOAT\n             | IDvalores : valor\n               | valor COMMA valoresimpresion : PRINTLN NOT LPAREN valores RPAREN\n                 | PRINTLN NOT LPAREN valor RPARENinput : STD DOUBLECOLON IO DOUBLECOLON STDIN LPAREN RPAREN DOT READLINE LPAREN REF MUT ID RPARENcondicion : valor operComp valoroperComp : GREATERTHAN\n                | LESSTHAN\n                | EQUALITY\n                | DIFFERENTFROM\n                | GREATEREQUALSTHAN\n                | LESSEQUALSTHANcondiciones : condicion\n                   | condicion conector condicionescondicion : TRUE\n                 | FALSEconector : AND\n                | ORasignacion : ID ASSIGN valor\n                    | ID ASSIGN condiciones\n                    | ID ASSIGN expresionAritmeticaasignacion : ID ASSIGN estructurasestructuras : tupla\n                    | arraytupla : LPAREN valores RPARENtupla : LPAREN RPARENarray : LBRACKET valores RBRACKETarray : LBRACKET RBRACKETestrWhile : WHILE condiciones LCURLYBRACKET codigo RCURLYBRACKETestrFor : FOR ID IN ID LCURLYBRACKET codigo RCURLYBRACKET'
    
_lr_action_items = {'PRINTLN':([0,62,79,],[10,10,10,]),'ID':([0,13,14,25,26,27,28,29,30,31,32,33,34,35,36,37,39,40,41,42,51,59,60,61,62,76,79,91,],[12,43,46,46,46,-10,-11,-12,-13,-14,-24,-25,-26,-27,-28,-29,46,-34,-35,46,46,46,46,71,12,46,12,92,]),'FOR':([0,62,79,],[13,13,13,]),'WHILE':([0,62,79,],[14,14,14,]),'STD':([0,62,79,],[15,15,15,]),'INTEGER':([0,14,25,26,27,28,29,30,31,32,33,34,35,36,37,39,40,41,42,51,59,60,62,76,79,],[16,16,16,16,-10,-11,-12,-13,-14,-24,-25,-26,-27,-28,-29,16,-34,-35,16,16,16,16,16,16,16,]),'FLOAT':([0,14,25,26,27,28,29,30,31,32,33,34,35,36,37,39,40,41,42,51,59,60,62,76,79,],[17,17,17,17,-10,-11,-12,-13,-14,-24,-25,-26,-27,-28,-29,17,-34,-35,17,17,17,17,17,17,17,]),'TRUE':([0,14,39,40,41,42,62,79,],[18,18,18,-34,-35,18,18,18,]),'FALSE':([0,14,39,40,41,42,62,79,],[19,19,19,-34,-35,19,19,19,]),'$end':([1,6,7,20,21,22,23,24,80,85,],[0,-5,-6,-1,-2,-3,-4,-7,-46,-47,]),'SEMICOLON':([2,3,4,5,8,11,16,17,18,19,46,48,49,50,52,53,54,55,56,57,58,67,70,74,75,77,78,93,],[20,21,22,23,24,-30,-15,-16,-32,-33,-17,-8,-9,-23,-31,-36,-37,-38,-39,-40,-41,-43,-45,-20,-21,-42,-44,-22,]),'RCURLYBRACKET':([6,7,20,21,22,23,24,72,80,83,85,],[-5,-6,-1,-2,-3,-4,-7,80,-46,85,-47,]),'PLUS':([9,12,16,17,46,48,53,],[27,-17,-15,-16,-17,27,27,]),'MINUS':([9,12,16,17,46,48,53,],[28,-17,-15,-16,-17,28,28,]),'MULT':([9,12,16,17,46,48,53,],[29,-17,-15,-16,-17,29,29,]),'DIVIDE':([9,12,16,17,46,48,53,],[30,-17,-15,-16,-17,30,30,]),'MOD':([9,12,16,17,46,48,53,],[31,-17,-15,-16,-17,31,31,]),'GREATERTHAN':([9,12,16,17,45,46,53,],[32,-17,-15,-16,32,-17,32,]),'LESSTHAN':([9,12,16,17,45,46,53,],[33,-17,-15,-16,33,-17,33,]),'EQUALITY':([9,12,16,17,45,46,53,],[34,-17,-15,-16,34,-17,34,]),'DIFFERENTFROM':([9,12,16,17,45,46,53,],[35,-17,-15,-16,35,-17,35,]),'GREATEREQUALSTHAN':([9,12,16,17,45,46,53,],[36,-17,-15,-16,36,-17,36,]),'LESSEQUALSTHAN':([9,12,16,17,45,46,53,],[37,-17,-15,-16,37,-17,37,]),'NOT':([10,],[38,]),'LCURLYBRACKET':([11,16,17,18,19,44,46,50,52,71,],[-30,-15,-16,-32,-33,62,-17,-23,-31,79,]),'AND':([11,16,17,18,19,46,50,],[40,-15,-16,-32,-33,-17,-23,]),'OR':([11,16,17,18,19,46,50,],[41,-15,-16,-32,-33,-17,-23,]),'ASSIGN':([12,],[42,]),'DOUBLECOLON':([15,63,],[47,73,]),'RPAREN':([16,17,46,59,64,65,66,68,82,84,92,],[-15,-16,-17,67,74,75,77,-18,-19,86,93,]),'COMMA':([16,17,46,65,68,],[-15,-16,-17,76,76,]),'RBRACKET':([16,17,46,60,68,69,82,],[-15,-16,-17,70,-18,78,-19,]),'LPAREN':([38,42,81,88,],[51,59,84,89,]),'LBRACKET':([42,],[60,]),'IN':([43,],[61,]),'IO':([47,],[63,]),'STDIN':([73,],[81,]),'DOT':([86,],[87,]),'READLINE':([87,],[88,]),'REF':([89,],[90,]),'MUT':([90,],[91,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'codigo':([0,62,79,],[1,72,83,]),'expresionAritmetica':([0,25,42,62,79,],[2,49,55,2,2,]),'impresion':([0,62,79,],[3,3,3,]),'condiciones':([0,14,39,42,62,79,],[4,44,52,54,4,4,]),'asignacion':([0,62,79,],[5,5,5,]),'estrFor':([0,62,79,],[6,6,6,]),'estrWhile':([0,62,79,],[7,7,7,]),'input':([0,62,79,],[8,8,8,]),'valor':([0,14,25,26,39,42,51,59,60,62,76,79,],[9,45,48,50,45,53,65,68,68,9,68,9,]),'condicion':([0,14,39,42,62,79,],[11,11,11,11,11,11,]),'operador':([9,48,53,],[25,25,25,]),'operComp':([9,45,53,],[26,26,26,]),'conector':([11,],[39,]),'estructuras':([42,],[56,]),'tupla':([42,],[57,]),'array':([42,],[58,]),'valores':([51,59,60,76,],[64,66,69,82,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> codigo","S'",1,None,None,None),
  ('codigo -> expresionAritmetica SEMICOLON','codigo',2,'p_codigo','parser.py',5),
  ('codigo -> impresion SEMICOLON','codigo',2,'p_codigo','parser.py',6),
  ('codigo -> condiciones SEMICOLON','codigo',2,'p_codigo','parser.py',7),
  ('codigo -> asignacion SEMICOLON','codigo',2,'p_codigo','parser.py',8),
  ('codigo -> estrFor','codigo',1,'p_codigo','parser.py',9),
  ('codigo -> estrWhile','codigo',1,'p_codigo','parser.py',10),
  ('codigo -> input SEMICOLON','codigo',2,'p_codigo','parser.py',11),
  ('expresionAritmetica -> valor operador valor','expresionAritmetica',3,'p_expresionAritmetica','parser.py',15),
  ('expresionAritmetica -> valor operador expresionAritmetica','expresionAritmetica',3,'p_expresionAritmetica','parser.py',16),
  ('operador -> PLUS','operador',1,'p_operador','parser.py',19),
  ('operador -> MINUS','operador',1,'p_operador','parser.py',20),
  ('operador -> MULT','operador',1,'p_operador','parser.py',21),
  ('operador -> DIVIDE','operador',1,'p_operador','parser.py',22),
  ('operador -> MOD','operador',1,'p_operador','parser.py',23),
  ('valor -> INTEGER','valor',1,'p_valor','parser.py',27),
  ('valor -> FLOAT','valor',1,'p_valor','parser.py',28),
  ('valor -> ID','valor',1,'p_valor','parser.py',29),
  ('valores -> valor','valores',1,'p_valores','parser.py',32),
  ('valores -> valor COMMA valores','valores',3,'p_valores','parser.py',33),
  ('impresion -> PRINTLN NOT LPAREN valores RPAREN','impresion',5,'p_impresion','parser.py',36),
  ('impresion -> PRINTLN NOT LPAREN valor RPAREN','impresion',5,'p_impresion','parser.py',37),
  ('input -> STD DOUBLECOLON IO DOUBLECOLON STDIN LPAREN RPAREN DOT READLINE LPAREN REF MUT ID RPAREN','input',14,'p_input','parser.py',42),
  ('condicion -> valor operComp valor','condicion',3,'p_condicion','parser.py',46),
  ('operComp -> GREATERTHAN','operComp',1,'p_operComp','parser.py',49),
  ('operComp -> LESSTHAN','operComp',1,'p_operComp','parser.py',50),
  ('operComp -> EQUALITY','operComp',1,'p_operComp','parser.py',51),
  ('operComp -> DIFFERENTFROM','operComp',1,'p_operComp','parser.py',52),
  ('operComp -> GREATEREQUALSTHAN','operComp',1,'p_operComp','parser.py',53),
  ('operComp -> LESSEQUALSTHAN','operComp',1,'p_operComp','parser.py',54),
  ('condiciones -> condicion','condiciones',1,'p_condiciones','parser.py',57),
  ('condiciones -> condicion conector condiciones','condiciones',3,'p_condiciones','parser.py',58),
  ('condicion -> TRUE','condicion',1,'p_condicionBool','parser.py',61),
  ('condicion -> FALSE','condicion',1,'p_condicionBool','parser.py',62),
  ('conector -> AND','conector',1,'p_conector','parser.py',65),
  ('conector -> OR','conector',1,'p_conector','parser.py',66),
  ('asignacion -> ID ASSIGN valor','asignacion',3,'p_asignacion','parser.py',70),
  ('asignacion -> ID ASSIGN condiciones','asignacion',3,'p_asignacion','parser.py',71),
  ('asignacion -> ID ASSIGN expresionAritmetica','asignacion',3,'p_asignacion','parser.py',72),
  ('asignacion -> ID ASSIGN estructuras','asignacion',3,'p_asignacionEstructuras','parser.py',76),
  ('estructuras -> tupla','estructuras',1,'p_estructuras','parser.py',79),
  ('estructuras -> array','estructuras',1,'p_estructuras','parser.py',80),
  ('tupla -> LPAREN valores RPAREN','tupla',3,'p_tupla','parser.py',83),
  ('tupla -> LPAREN RPAREN','tupla',2,'p_tuplaVacia','parser.py',86),
  ('array -> LBRACKET valores RBRACKET','array',3,'p_array','parser.py',89),
  ('array -> LBRACKET RBRACKET','array',2,'p_arrayVacio','parser.py',92),
  ('estrWhile -> WHILE condiciones LCURLYBRACKET codigo RCURLYBRACKET','estrWhile',5,'p_estrWhile','parser.py',96),
  ('estrFor -> FOR ID IN ID LCURLYBRACKET codigo RCURLYBRACKET','estrFor',7,'p_estrFor','parser.py',99),
]
